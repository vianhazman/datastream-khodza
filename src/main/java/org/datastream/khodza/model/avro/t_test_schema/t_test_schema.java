/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.datastream.khodza.model.avro.t_test_schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class t_test_schema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5609556920240023940L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"t_test_schema\",\"namespace\":\"org.datastream.khodza.model.avro.t_test_schema\",\"fields\":[{\"name\":\"mahasiswa_npm\",\"type\":\"string\"},{\"name\":\"course_id\",\"type\":\"string\"},{\"name\":\"message_timestamp\",\"type\":[\"null\",{\"type\":\"string\",\"logicalType\":\"timestamp-micros\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence mahasiswa_npm;
  @Deprecated public java.lang.CharSequence course_id;
  @Deprecated public java.lang.CharSequence message_timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public t_test_schema() {}

  /**
   * All-args constructor.
   * @param mahasiswa_npm The new value for mahasiswa_npm
   * @param course_id The new value for course_id
   * @param message_timestamp The new value for message_timestamp
   */
  public t_test_schema(java.lang.CharSequence mahasiswa_npm, java.lang.CharSequence course_id, java.lang.CharSequence message_timestamp) {
    this.mahasiswa_npm = mahasiswa_npm;
    this.course_id = course_id;
    this.message_timestamp = message_timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mahasiswa_npm;
    case 1: return course_id;
    case 2: return message_timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mahasiswa_npm = (java.lang.CharSequence)value$; break;
    case 1: course_id = (java.lang.CharSequence)value$; break;
    case 2: message_timestamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'mahasiswa_npm' field.
   * @return The value of the 'mahasiswa_npm' field.
   */
  public java.lang.CharSequence getMahasiswaNpm() {
    return mahasiswa_npm;
  }

  /**
   * Sets the value of the 'mahasiswa_npm' field.
   * @param value the value to set.
   */
  public void setMahasiswaNpm(java.lang.CharSequence value) {
    this.mahasiswa_npm = value;
  }

  /**
   * Gets the value of the 'course_id' field.
   * @return The value of the 'course_id' field.
   */
  public java.lang.CharSequence getCourseId() {
    return course_id;
  }

  /**
   * Sets the value of the 'course_id' field.
   * @param value the value to set.
   */
  public void setCourseId(java.lang.CharSequence value) {
    this.course_id = value;
  }

  /**
   * Gets the value of the 'message_timestamp' field.
   * @return The value of the 'message_timestamp' field.
   */
  public java.lang.CharSequence getMessageTimestamp() {
    return message_timestamp;
  }

  /**
   * Sets the value of the 'message_timestamp' field.
   * @param value the value to set.
   */
  public void setMessageTimestamp(java.lang.CharSequence value) {
    this.message_timestamp = value;
  }

  /**
   * Creates a new t_test_schema RecordBuilder.
   * @return A new t_test_schema RecordBuilder
   */
  public static org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder newBuilder() {
    return new org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder();
  }

  /**
   * Creates a new t_test_schema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new t_test_schema RecordBuilder
   */
  public static org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder newBuilder(org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder other) {
    return new org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder(other);
  }

  /**
   * Creates a new t_test_schema RecordBuilder by copying an existing t_test_schema instance.
   * @param other The existing instance to copy.
   * @return A new t_test_schema RecordBuilder
   */
  public static org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder newBuilder(org.datastream.khodza.model.avro.t_test_schema.t_test_schema other) {
    return new org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder(other);
  }

  /**
   * RecordBuilder for t_test_schema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<t_test_schema>
    implements org.apache.avro.data.RecordBuilder<t_test_schema> {

    private java.lang.CharSequence mahasiswa_npm;
    private java.lang.CharSequence course_id;
    private java.lang.CharSequence message_timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mahasiswa_npm)) {
        this.mahasiswa_npm = data().deepCopy(fields()[0].schema(), other.mahasiswa_npm);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.course_id)) {
        this.course_id = data().deepCopy(fields()[1].schema(), other.course_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message_timestamp)) {
        this.message_timestamp = data().deepCopy(fields()[2].schema(), other.message_timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing t_test_schema instance
     * @param other The existing instance to copy.
     */
    private Builder(org.datastream.khodza.model.avro.t_test_schema.t_test_schema other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.mahasiswa_npm)) {
        this.mahasiswa_npm = data().deepCopy(fields()[0].schema(), other.mahasiswa_npm);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.course_id)) {
        this.course_id = data().deepCopy(fields()[1].schema(), other.course_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message_timestamp)) {
        this.message_timestamp = data().deepCopy(fields()[2].schema(), other.message_timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'mahasiswa_npm' field.
      * @return The value.
      */
    public java.lang.CharSequence getMahasiswaNpm() {
      return mahasiswa_npm;
    }

    /**
      * Sets the value of the 'mahasiswa_npm' field.
      * @param value The value of 'mahasiswa_npm'.
      * @return This builder.
      */
    public org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder setMahasiswaNpm(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.mahasiswa_npm = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mahasiswa_npm' field has been set.
      * @return True if the 'mahasiswa_npm' field has been set, false otherwise.
      */
    public boolean hasMahasiswaNpm() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mahasiswa_npm' field.
      * @return This builder.
      */
    public org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder clearMahasiswaNpm() {
      mahasiswa_npm = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'course_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getCourseId() {
      return course_id;
    }

    /**
      * Sets the value of the 'course_id' field.
      * @param value The value of 'course_id'.
      * @return This builder.
      */
    public org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder setCourseId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.course_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'course_id' field has been set.
      * @return True if the 'course_id' field has been set, false otherwise.
      */
    public boolean hasCourseId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'course_id' field.
      * @return This builder.
      */
    public org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder clearCourseId() {
      course_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'message_timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessageTimestamp() {
      return message_timestamp;
    }

    /**
      * Sets the value of the 'message_timestamp' field.
      * @param value The value of 'message_timestamp'.
      * @return This builder.
      */
    public org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder setMessageTimestamp(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.message_timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'message_timestamp' field has been set.
      * @return True if the 'message_timestamp' field has been set, false otherwise.
      */
    public boolean hasMessageTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'message_timestamp' field.
      * @return This builder.
      */
    public org.datastream.khodza.model.avro.t_test_schema.t_test_schema.Builder clearMessageTimestamp() {
      message_timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public t_test_schema build() {
      try {
        t_test_schema record = new t_test_schema();
        record.mahasiswa_npm = fieldSetFlags()[0] ? this.mahasiswa_npm : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.course_id = fieldSetFlags()[1] ? this.course_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.message_timestamp = fieldSetFlags()[2] ? this.message_timestamp : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
